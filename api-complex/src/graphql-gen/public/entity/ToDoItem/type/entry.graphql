
# # To Do Item


input EmbedToDoItemFilter {
  or: [EmbedToDoItemFilterItem]
  and: [EmbedToDoItemFilterItem]
  some: ToDoItemFilter
  none: ToDoItemFilter
  every: ToDoItemFilter
}

input EmbedToDoItemFilterItem {
  some: ToDoItemFilter
  none: ToDoItemFilter
  every: ToDoItemFilter
}

input ToDoItemFilter {
  or: [ToDoItemFilterItem]
  and: [ToDoItemFilterItem]
  name: WhereString
  description: WhereString
  done: WhereBoolean
  dueToDate: WhereDate
  user: WhereString
  id: WhereID
}

input ToDoItemComplexFilter {
  or: [ToDoItemComplexFilter]
  and: [ToDoItemComplexFilter]
  name: WhereString
  description: WhereString
  done: WhereBoolean
  dueToDate: WhereDate
  user: WhereString
  id: WhereID
}

input ToDoItemFilterItem {
  name: WhereString
  description: WhereString
  done: WhereBoolean
  dueToDate: WhereDate
  user: WhereString
  id: WhereID
}

input ToDoItemFilterSubscriptionsItem {
  name: WhereString
  description: WhereString
  done: WhereBoolean
  dueToDate: WhereDate
  user: WhereString
  id: WhereID
}

input ToDoItemFilterSubscriptions {
  or: [ToDoItemFilterSubscriptions]
  and: [ToDoItemFilterSubscriptions]
  mutation: WhereMutationKind
  node: ToDoItemFilterSubscriptionsItem
  previous: ToDoItemFilterSubscriptionsItem
  updatedFields: WhereListOfStrings
}

type ToDoItem implements Node{
  # # Name
  name: String
  # # Description
  description: String
  # # Done
  done: Boolean
  # # Due To Date
  dueToDate: Date
  # # Id
  id: ID!
  # # User
  user: User

}


