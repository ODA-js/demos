# # Follower

input EmbedFollowerFilter {
  or: [EmbedFollowerFilterItem]
  and: [EmbedFollowerFilterItem]
  some: FollowerFilter
  none: FollowerFilter
  every: FollowerFilter
}

input EmbedFollowerFilterItem {
  some: FollowerFilter
  none: FollowerFilter
  every: FollowerFilter
}

input FollowerFilter {
  or: [FollowerFilterItem]
  and: [FollowerFilterItem]
  follower: WhereString
  following: WhereString
  id: WhereID
}

input FollowerComplexFilter {
  or: [FollowerComplexFilter]
  and: [FollowerComplexFilter]
  follower: WhereString
  following: WhereString
  id: WhereID
}

input FollowerFilterItem {
  follower: WhereString
  following: WhereString
  id: WhereID
}

input FollowerFilterSubscriptionsItem {
  follower: WhereString
  following: WhereString
  id: WhereID
}

input FollowerFilterSubscriptions {
  or: [FollowerFilterSubscriptions]
  and: [FollowerFilterSubscriptions]
  mutation: WhereMutationKind
  node: FollowerFilterSubscriptionsItem
  previous: FollowerFilterSubscriptionsItem
  updatedFields: WhereListOfStrings
}

type Follower implements Node {
  # # Follower
  follower: String
  # # Following
  following: String
  # # Id
  id: ID!
}
