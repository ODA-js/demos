input addToUserHasManyTodosInput {
  clientMutationId: String
  user: ID!
  toDoItem: ID!
  #additional Edge fields
}

type addToUserHasManyTodosPayload {
  clientMutationId: String
  viewer: Viewer
  user: User
}

input removeFromUserHasManyTodosInput {
  clientMutationId: String
  toDoItem: ID!
  user: ID!
}

type removeFromUserHasManyTodosPayload {
  clientMutationId: String
  viewer: Viewer
  user: User
}

input addToUserHasManyFilesInput {
  clientMutationId: String
  user: ID!
  file: ID!
  #additional Edge fields
}

type addToUserHasManyFilesPayload {
  clientMutationId: String
  viewer: Viewer
  user: User
}

input removeFromUserHasManyFilesInput {
  clientMutationId: String
  file: ID!
  user: ID!
}

type removeFromUserHasManyFilesPayload {
  clientMutationId: String
  viewer: Viewer
  user: User
}

input addToUserBelongsToManyFollowingsInput {
  clientMutationId: String
  user: ID!
  userFollowings: ID!
  #additional Edge fields
}

type addToUserBelongsToManyFollowingsPayload {
  clientMutationId: String
  viewer: Viewer
  user: User
}

input removeFromUserBelongsToManyFollowingsInput {
  clientMutationId: String
  userFollowings: ID!
  user: ID!
}

type removeFromUserBelongsToManyFollowingsPayload {
  clientMutationId: String
  viewer: Viewer
  user: User
}

input addToUserBelongsToManyFollowersInput {
  clientMutationId: String
  user: ID!
  userFollowers: ID!
  #additional Edge fields
}

type addToUserBelongsToManyFollowersPayload {
  clientMutationId: String
  viewer: Viewer
  user: User
}

input removeFromUserBelongsToManyFollowersInput {
  clientMutationId: String
  userFollowers: ID!
  user: ID!
}

type removeFromUserBelongsToManyFollowersPayload {
  clientMutationId: String
  viewer: Viewer
  user: User
}
